Description: CD12352 - Infrastructure as Code Project - Udagram

Parameters:

  ProjectName:
    Description: A project name that will be prefixed to resource names
    Type: String

Resources:

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to the load balancer Ingress recives port 80 only, Egress is unrestriced
      VpcId:
        Fn::ImportValue:
          !Sub "${ProjectName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: 
        Fn::ImportValue:
          !Sub "${ProjectName}-VPCID"
      GroupDescription: Security group for Bastion servers that enable SSH access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

  EC2KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: udagramSKey

  BastionHostInstance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0557a15b87f6559cf
      KeyName: !Ref EC2KeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          SubnetId: 
            Fn::ImportValue: 
              !Sub "${ProjectName}-PUB1-SN"  
          GroupSet:
            - !Ref BastionSecurityGroup
  
  BastionHostInstance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0557a15b87f6559cf
      KeyName: !Ref EC2KeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          SubnetId: 
            Fn::ImportValue: 
              !Sub "${ProjectName}-PUB2-SN"  
          GroupSet:
            - !Ref BastionSecurityGroup

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to the hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${ProjectName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "web-servers-template"
      LaunchTemplateData:
        UserData:
          Fn::Base64: |
            #!/bin/bash
            apt-get update -y
            apt-get install nginx -y

            cat <<EOT > /usr/share/nginx/html/index.html
            <!DOCTYPE html>
            <html>
            <body>
                <h1>It works! Udagram, Udacity</h1>
            </body>
            </html>
            EOT

            systemctl restart nginx

            apt-get install -y awslogs

            cat <<EoF >> /etc/awslogs/awslogs.conf
            [general]
            state_file = /var/lib/awslogs/agent-state

            [/var/log/nginx/access.log]
            file = /var/log/nginx/access.log
            log_group_name = !Sub "${ProjectName}/nginx-access"
            log_stream_name = {instance_id}

            [/var/log/nginx/error.log]
            file = /var/log/nginx/error.log
            log_group_name = !Sub "${ProjectName}/nginx-error"
            log_stream_name = {instance_id}
            EoF
            systemctl start awslogs
        ImageId: ami-0557a15b87f6559cf
        SecurityGroupIds:
          - !Ref WebServerSecurityGroup
        InstanceType: t2.micro
        IamInstanceProfile:
          Name: !Ref WebServerInstanceProfile
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
  
  WebServerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "web-servers-instance-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 's3:PutObject*'
              - 's3:GetObject*'
              Resource:
                - !Sub "arn:aws:s3:::any-bucket-name/*"
        - PolicyName: SSMAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - ssm:DescribeInstanceInformation
                  - ssm:GetCommandInvocation
                  - ssm:ListCommands
                  - ssm:ListCommandInvocations
                  - ssm:SendCommand
                  - ssm:StartSession
                  - ec2messages:Get*
                Resource: "*"
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref WebServerInstanceRole
  
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
      - Fn::ImportValue: 
          !Sub "${ProjectName}-PRIV-NETS"
      LaunchTemplate: 
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      MinSize: '4' 
      DesiredCapacity: '4'
      MaxSize: '4' 
      TargetGroupARNs:
      - Ref: WebAppTargetGroup     

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${ProjectName}-VPCID"

  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${ProjectName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${ProjectName}-PUB2-SN"
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLoadBalancer
      Port: '80'
      Protocol: HTTP

  AppLoadBalancerListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

Outputs:
  LoadBalancerURL:
    Description: A URL of the Load Balancer DNS Name 
    Value: !Sub http://${WebAppLoadBalancer.DNSName}
    Export:
      Name: !Sub ${ProjectName}-LB-URL

  BastionIP1:
    Description: IP1 of the Bastion Host
    Value: !GetAtt BastionHostInstance1.PublicIp
  BastionIP2:
    Description: IP2 of the Bastion Host
    Value: !GetAtt BastionHostInstance2.PublicIp

  WebServerLogs:
    Description: Log group for Web Server logs
    Value: !Sub "${ProjectName}/nginx-access"